---
- name: Add new sudo user
  hosts: all
  become: true
  tasks:
    - name: Hash the password
      ansible.builtin.set_fact:
        user_password: "{{ sudo_user_password | password_hash('sha512') }}"

    - name: Create user with password
      ansible.builtin.user:
        name: "{{ sudo_user }}"
        password: "{{ user_password }}"
        shell: /bin/bash
        create_home: yes

    - name: Add user to sudo group
      user:
        name: "{{ sudo_user }}"
        groups: sudo
        append: yes

- name: "Install Nginx and certbot"
  hosts: all
  become: true
  tasks:
    - name: "Install Nginx"
      apt:
        name: nginx
        state: present
        update_cache: true

    - name: "Start Nginx"
      service:
        name: nginx
        state: started
        enabled: true
    - name: "Update APT cache"
      apt:
        update_cache: yes

    - name: "Install Certbox"
      apt:
        name:
          - certbot
          - python3-certbot-nginx
        state: present

- name: "Install Docker"
  hosts: all
  become: true
  tasks:
    - name: Install required dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
    
    - name: Download Docker GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      become: true

    - name: Add Docker repository
      shell: add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      become: true

    - name: Install Docker CE (Community Edition)
      apt:
        name: docker-ce
        state: present

    - name: Ensure Docker service is started and enabled
      service:
        name: docker
        state: started
        enabled: yes
    
    - name: Add user to sudo group
      user:
        name: "{{ sudo_user }}"
        groups: docker
        append: yes

    - name: Install Docker Compose (from the official script)
      shell: >
        curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
      args:
        creates: /usr/local/bin/docker-compose

    - name: Make Docker Compose executable
      file:
        path: /usr/local/bin/docker-compose
        mode: 'u+x'

- name: Prepare and run Aplication
  hosts: all
  become: true
  collections:
    - community.docker
  tasks:
    - name: Copy application files that will include docker compose and all
      ansible.posix.synchronize:
        src: application_files/
        dest: /home/admin/
        recursive: yes


    - name: List contents of home
      ansible.builtin.find:
        paths: /home/"{{ sudo_user }}"/
      register: files_in_home

    - name: Show the files
      ansible.builtin.debug:
        var: files_in_home.files

    - name: Deploy services with docker-compose
      community.docker.docker_compose_v2:
        project_src: /home/"{{ sudo_user }}"/{{ app.directory }}
      loop: "{{ applications }}"
      loop_control:
        loop_var: app
        label: "{{ app.directory }} ({{ app.port }})"

    - name: Wait for app to be reachable
      ansible.builtin.wait_for:
        port: "{{ app.port }}"
        host: "127.0.0.1"
        timeout: "{{ app.timeout: }}"
      loop: "{{ applications }}"
      loop_control:
        loop_var: app
      

  
- name: Install nginx configuration file and generate ssl ca-certificates
  hosts: all
  become: true

  tasks:
    - name: Deploy nginx config from template
      ansible.builtin.template:
        src: templates/nginx.conf.jinja
        dest: "{{ nginx_configuration_file_path }}"
        owner: root
        group: root
        mode: '0644'

    - name: Create symlink
      ansible.builtin.file:
        src: "{{ nginx_configuration_file_path }}"
        dest: /etc/nginx/sites-enabled/{{ server_name }}
        state: link

    - name: Restart nginx with systemd
      ansible.builtin.systemd:
        name: nginx
        state: restarted
        enabled: yes
        daemon_reload: yes
    
    - name: Generate ca-certificates
      ansible.builtin.shell: >
        certbot --nginx -d {{ server_name }} --non-interactive --agree-tos -m {{ acme_email }}
      args:
        creates: /etc/letsencrypt/live/{{ server_name }}/fullchain.pem
      register: certbot_result
      ignore_errors: yes
      when: false # Set to true if you want to generate the certificates automatically
        
